Lab 2 Part II
By Haojie Chen

-------------------------------
When compile testovf.c only with -O2 using:
$gcc -c -O2 testovf.c
The assembly program we get is:
0000000000000000 <testovf>:
0:   31 c0                   xor    %eax,%eax
2:   c3                      retq

In this case, function returns 0. “xorl %eax, %eax” just clears the %eax register and makes the value in it 0. Thus the program simply returns 0. This is because mathematically, “big + LONG_MAX”, which equals to “big + big”, will always be larger than “big”. Therefore, it optimizes the code and simply returns 0, the compiler does not even get to deal with overflow problem.



When compile testovf.cwith -O2 -fsanitize=undefined using:
$gcc -c -O2 -fsanitize=undefined testovf.c,
The assembly program we get is:
0000000000000000 <testovf>:
0:   55                      push   %rbp
   1:   53                      push   %rbx
      2:   48 ba ff ff ff ff ff    movabs $0x7fffffffffffffff,%rdx
         9:   ff ff 7f
	    c:   48 83 ec 08             sub    $0x8,%rsp
	      10:   48 8b 1d 00 00 00 00    mov    0x0(%rip),%rbx        # 17 <testovf+0x17>
	        17:   48 89 dd                mov    %rbx,%rbp
		  1a:   48 01 d5                add    %rdx,%rbp
		    1d:   70 0d                   jo     2c <testovf+0x2c>
		      1f:   48 39 eb                cmp    %rbp,%rbx
		        22:   0f 9f c0                setg   %al
			  25:   48 83 c4 08             add    $0x8,%rsp
			    29:   5b                      pop    %rbx
			      2a:   5d                      pop    %rbp
			        2b:   c3                      retq
				  2c:   48 89 de                mov    %rbx,%rsi
				    2f:   bf 00 00 00 00          mov    $0x0,%edi
				      34:   e8 00 00 00 00          callq  39 <testovf+0x39>
				        39:   eb e4                   jmp    1f <testovf+0x1f>
					

In this case, function returns 1. -fsanitize=undefined is a runtime fast and compatible undefined behavior checker (includes signed integer overflow). The compiler actually checks for overflow(using instruction “jo”), and if there is one detected, a diagnostic message is produced at runtime explaining the problem. But the compiler continues to do what is undefined behavior and gives the wrong sum.



When compile testovf.c with -O2 -fwrapv using:
$gcc -c -O2 -fwrapv testovf.c
The assembly program we get is:
0000000000000000 <testovf>:
   0:   48 8b 15 00 00 00 00    mov    0x0(%rip),%rdx        # 7 <testovf+0x7>
      7:   48 b8 ff ff ff ff ff    movabs $0x7fffffffffffffff,%rax
         e:   ff ff 7f
	   11:   48 01 d0                add    %rdx,%rax
	     14:   48 39 c2                cmp    %rax,%rdx
	       17:   0f 9f c0                setg   %al
	         1a:   c3                      retq

In this case, function returns 1. Since we add the -fwrapv flag, the complier assumes wrap semantic when overflow occurs(assumes undefined behavior). And when overflow occurs, it just let two’s complement number wraps around and gives the wrong sum.
